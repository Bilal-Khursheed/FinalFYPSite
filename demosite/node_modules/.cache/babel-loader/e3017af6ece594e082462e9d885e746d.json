{"ast":null,"code":"const path = require('path');\n\nconst fs = require('fs');\n\nconst existsSync = fs.existsSync;\n\nconst utils = require('../utils');\n\nmodule.exports = exec;\nmodule.exports.expandScript = expandScript;\n/**\n * Reads the cwd/package.json file and looks to see if it can load a script\n * and possibly an exec first from package.main, then package.start.\n *\n * @return {Object} exec & script if found\n */\n\nfunction execFromPackage() {\n  // doing a try/catch because we can't use the path.exist callback pattern\n  // or we could, but the code would get messy, so this will do exactly\n  // what we're after - if the file doesn't exist, it'll throw.\n  try {\n    // note: this isn't nodemon's package, it's the user's cwd package\n    var pkg = require(path.join(process.cwd(), 'package.json'));\n\n    if (pkg.main !== undefined) {\n      // no app found to run - so give them a tip and get the feck out\n      return {\n        exec: null,\n        script: pkg.main\n      };\n    }\n\n    if (pkg.scripts && pkg.scripts.start) {\n      return {\n        exec: pkg.scripts.start\n      };\n    }\n  } catch (e) {}\n\n  return null;\n}\n\nfunction replace(map, str) {\n  var re = new RegExp('{{(' + Object.keys(map).join('|') + ')}}', 'g');\n  return str.replace(re, function (all, m) {\n    return map[m] || all || '';\n  });\n}\n\nfunction expandScript(script, ext) {\n  if (!ext) {\n    ext = '.js';\n  }\n\n  if (script.indexOf(ext) !== -1) {\n    return script;\n  }\n\n  if (existsSync(path.resolve(script))) {\n    return script;\n  }\n\n  if (existsSync(path.resolve(script + ext))) {\n    return script + ext;\n  }\n\n  return script;\n}\n/**\n * Discovers all the options required to run the script\n * and if a custom exec has been passed in, then it will\n * also try to work out what extensions to monitor and\n * whether there's a special way of running that script.\n *\n * @param  {Object} nodemonOptions\n * @param  {Object} execMap\n * @return {Object} new and updated version of nodemonOptions\n */\n\n\nfunction exec(nodemonOptions, execMap) {\n  if (!execMap) {\n    execMap = {};\n  }\n\n  var options = utils.clone(nodemonOptions || {});\n  var script; // if there's no script passed, try to get it from the first argument\n\n  if (!options.script && (options.args || []).length) {\n    script = expandScript(options.args[0], options.ext && '.' + (options.ext || 'js').split(',')[0]); // if the script was found, shift it off our args\n\n    if (script !== options.args[0]) {\n      options.script = script;\n      options.args.shift();\n    }\n  } // if there's no exec found yet, then try to read it from the local\n  // package.json this logic used to sit in the cli/parse, but actually the cli\n  // should be parsed first, then the user options (via nodemon.json) then\n  // finally default down to pot shots at the directory via package.json\n\n\n  if (!options.exec && !options.script) {\n    var found = execFromPackage();\n\n    if (found !== null) {\n      if (found.exec) {\n        options.exec = found.exec;\n      }\n\n      if (!options.script) {\n        options.script = found.script;\n      }\n\n      if (Array.isArray(options.args) && options.scriptPosition === null) {\n        options.scriptPosition = options.args.length;\n      }\n    }\n  } // var options = utils.clone(nodemonOptions || {});\n\n\n  script = path.basename(options.script || '');\n  var scriptExt = path.extname(script).slice(1);\n  var extension = options.ext;\n\n  if (extension === undefined) {\n    var isJS = scriptExt === 'js' || scriptExt === 'mjs';\n    extension = isJS || !scriptExt ? 'js,mjs' : scriptExt;\n    extension += ',json'; // Always watch JSON files\n  }\n\n  var execDefined = !!options.exec; // allows the user to simplify cli usage:\n  // https://github.com/remy/nodemon/issues/195\n  // but always give preference to the user defined argument\n\n  if (!options.exec && execMap[scriptExt] !== undefined) {\n    options.exec = execMap[scriptExt];\n    execDefined = true;\n  }\n\n  options.execArgs = nodemonOptions.execArgs || [];\n\n  if (Array.isArray(options.exec)) {\n    options.execArgs = options.exec;\n    options.exec = options.execArgs.shift();\n  }\n\n  if (options.exec === undefined) {\n    options.exec = 'node';\n  } else {\n    // allow variable substitution for {{filename}} and {{pwd}}\n    var substitution = replace.bind(null, {\n      filename: options.script,\n      pwd: process.cwd()\n    });\n    var newExec = substitution(options.exec);\n\n    if (newExec !== options.exec && options.exec.indexOf('{{filename}}') !== -1) {\n      options.script = null;\n    }\n\n    options.exec = newExec;\n    var newExecArgs = options.execArgs.map(substitution);\n\n    if (newExecArgs.join('') !== options.execArgs.join('')) {\n      options.execArgs = newExecArgs;\n      delete options.script;\n    }\n  }\n\n  if (options.exec === 'node' && options.nodeArgs && options.nodeArgs.length) {\n    options.execArgs = options.execArgs.concat(options.nodeArgs);\n  } // note: indexOf('coffee') handles both .coffee and .litcoffee\n\n\n  if (!execDefined && options.exec === 'node' && scriptExt.indexOf('coffee') !== -1) {\n    options.exec = 'coffee'; // we need to get execArgs set before the script\n    // for example, in `nodemon --debug my-script.coffee --my-flag`, debug is an\n    // execArg, while my-flag is a script arg\n\n    var leadingArgs = (options.args || []).splice(0, options.scriptPosition);\n    options.execArgs = options.execArgs.concat(leadingArgs);\n    options.scriptPosition = 0;\n\n    if (options.execArgs.length > 0) {\n      // because this is the coffee executable, we need to combine the exec args\n      // into a single argument after the nodejs flag\n      options.execArgs = ['--nodejs', options.execArgs.join(' ')];\n    }\n  }\n\n  if (options.exec === 'coffee') {\n    // don't override user specified extension tracking\n    if (options.ext === undefined) {\n      if (extension) {\n        extension += ',';\n      }\n\n      extension += 'coffee,litcoffee';\n    } // because windows can't find 'coffee', it needs the real file 'coffee.cmd'\n\n\n    if (utils.isWindows) {\n      options.exec += '.cmd';\n    }\n  } // allow users to make a mistake on the extension to monitor\n  // converts .js, pug => js,pug\n  // BIG NOTE: user can't do this: nodemon -e *.js\n  // because the terminal will automatically expand the glob against\n  // the file system :(\n\n\n  extension = (extension.match(/[^,*\\s]+/g) || []).map(ext => ext.replace(/^\\./, '')).join(',');\n  options.ext = extension;\n\n  if (options.script) {\n    options.script = expandScript(options.script, extension && '.' + extension.split(',')[0]);\n  }\n\n  options.env = {}; // make sure it's an object (and since we don't have )\n\n  if ({}.toString.apply(nodemonOptions.env) === '[object Object]') {\n    options.env = utils.clone(nodemonOptions.env);\n  } else if (nodemonOptions.env !== undefined) {\n    throw new Error('nodemon env values must be an object: { PORT: 8000 }');\n  }\n\n  return options;\n}","map":null,"metadata":{},"sourceType":"script"}