{"ast":null,"code":"const utils = require('./utils');\n\nconst merge = utils.merge;\nconst bus = utils.bus;\n\nconst spawn = require('child_process').spawn;\n\nmodule.exports = function spawnCommand(command, config, eventArgs) {\n  var stdio = ['pipe', 'pipe', 'pipe'];\n\n  if (config.options.stdout) {\n    stdio = ['pipe', process.stdout, process.stderr];\n  }\n\n  var sh = 'sh';\n  var shFlag = '-c';\n\n  if (utils.isWindows) {\n    sh = 'cmd';\n    shFlag = '/c';\n  }\n\n  if (!Array.isArray(command)) {\n    command = [command];\n  }\n\n  const args = command.join(' ');\n  const env = merge(process.env, {\n    FILENAME: eventArgs[0]\n  });\n  const child = spawn(sh, [shFlag, args], {\n    env: merge(config.options.execOptions.env, env),\n    stdio: stdio\n  });\n\n  if (config.required) {\n    var emit = {\n      stdout: function (data) {\n        bus.emit('stdout', data);\n      },\n      stderr: function (data) {\n        bus.emit('stderr', data);\n      }\n    }; // now work out what to bind to...\n\n    if (config.options.stdout) {\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\n    } else {\n      child.stdout.on('data', emit.stdout);\n      child.stderr.on('data', emit.stderr);\n      bus.stdout = child.stdout;\n      bus.stderr = child.stderr;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}