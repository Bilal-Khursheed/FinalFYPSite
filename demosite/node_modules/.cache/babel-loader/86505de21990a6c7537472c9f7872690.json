{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\React Work\\\\React\\\\demoProject\\\\demosite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\React Work\\\\React\\\\demoProject\\\\demosite\\\\src\\\\componets\\\\Common\\\\privateRoute\\\\privateRoutes.js\";\nimport React from \"react\"; //import { connect } from \"react-redux\";\n\nimport { Redirect, Route } from \"react-router-dom\";\nimport { restart } from \"nodemon\";\n\nconst PrivateRoute = (_ref) => {\n  let Component = _ref.Component,\n      rest = _objectWithoutProperties(_ref, [\"Component\"]);\n\n  React.createElement(Route, Object.assign({}, rest, {\n    render: props => localStorage.getItem(\"authToken\") ? React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: {\n        pathname: \"/\",\n        state: {\n          from: props.location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n};\n\nexport default PrivateRoute;\n/*import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => {\r\n  let route =\r\n    (auth.isAuthenticated &&\r\n      !isEmpty(auth.user) &&\r\n      !isEmpty(auth.user.organisation_id)) ||\r\n    (auth.isAuthenticated && rest.path === \"/admin\") ? (\r\n      <Component {...rest} />\r\n    ) : auth.isAuthenticated && !isEmpty(auth.user) ? (\r\n      <Redirect to=\"/admin\" />\r\n    ) : (\r\n      <Redirect to=\"/\" />\r\n    );\r\n  return <Route {...rest} render={(props) => route} />;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PrivateRoute);\r\n*/","map":{"version":3,"sources":["C:/Users/DELL/Desktop/React Work/React/demoProject/demosite/src/componets/Common/privateRoute/privateRoutes.js"],"names":["React","Redirect","Route","restart","PrivateRoute","Component","rest","props","localStorage","getItem","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,SAAxB;;AAEA,MAAMC,YAAY,GAAG,UAAuC;AAAA,MAAzBC,SAAyB,QAApCA,SAAoC;AAAA,MAAXC,IAAW;;AAC1D,sBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAGC,KAAD,IACNC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACE,oBAAC,SAAD,oBAAeF,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,GAGE,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEG,QAAAA,QAAQ,EAAE,GAAZ;AAAiBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd;AAAxB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUD,CAXD;;AAaA,eAAeT,YAAf;AAEA","sourcesContent":["import React from \"react\";\r\n//import { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { restart } from \"nodemon\";\r\n\r\nconst PrivateRoute = ({ Component: Component, ...rest }) => {\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      localStorage.getItem(\"authToken\") ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\r\n      )\r\n    }\r\n  />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n\r\n/*import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => {\r\n  let route =\r\n    (auth.isAuthenticated &&\r\n      !isEmpty(auth.user) &&\r\n      !isEmpty(auth.user.organisation_id)) ||\r\n    (auth.isAuthenticated && rest.path === \"/admin\") ? (\r\n      <Component {...rest} />\r\n    ) : auth.isAuthenticated && !isEmpty(auth.user) ? (\r\n      <Redirect to=\"/admin\" />\r\n    ) : (\r\n      <Redirect to=\"/\" />\r\n    );\r\n  return <Route {...rest} render={(props) => route} />;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PrivateRoute);\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}