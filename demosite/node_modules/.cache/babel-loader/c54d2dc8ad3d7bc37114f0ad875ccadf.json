{"ast":null,"code":"module.exports = version;\nmodule.exports.pin = pin;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar exec = require('child_process').exec;\n\nvar root = null;\n\nfunction pin() {\n  return version().then(function (v) {\n    version.pinned = v;\n  });\n}\n\nfunction version(callback) {\n  // first find the package.json as this will be our root\n  var promise = findPackage(path.dirname(module.parent.filename)).then(function (dir) {\n    // now try to load the package\n    var v = require(path.resolve(dir, 'package.json')).version;\n\n    if (v && v !== '0.0.0-development') {\n      return v;\n    }\n\n    root = dir; // else we're in development, give the commit out\n    // get the last commit and whether the working dir is dirty\n\n    var promises = [branch().catch(function () {\n      return 'master';\n    }), commit().catch(function () {\n      return '<none>';\n    }), dirty().catch(function () {\n      return 0;\n    })]; // use the cached result as the export\n\n    return Promise.all(promises).then(function (res) {\n      var branch = res[0];\n      var commit = res[1];\n      var dirtyCount = parseInt(res[2], 10);\n      var curr = branch + ': ' + commit;\n\n      if (dirtyCount !== 0) {\n        curr += ' (' + dirtyCount + ' dirty files)';\n      }\n\n      return curr;\n    });\n  }).catch(function (error) {\n    console.log(error.stack);\n    throw error;\n  });\n\n  if (callback) {\n    promise.then(function (res) {\n      callback(null, res);\n    }, callback);\n  }\n\n  return promise;\n}\n\nfunction findPackage(dir) {\n  if (dir === '/') {\n    return Promise.reject(new Error('package not found'));\n  }\n\n  return new Promise(function (resolve) {\n    fs.stat(path.resolve(dir, 'package.json'), function (error, exists) {\n      if (error || !exists) {\n        return resolve(findPackage(path.resolve(dir, '..')));\n      }\n\n      resolve(dir);\n    });\n  });\n}\n\nfunction command(cmd) {\n  return new Promise(function (resolve, reject) {\n    exec(cmd, {\n      cwd: root\n    }, function (err, stdout, stderr) {\n      var error = stderr.trim();\n\n      if (error) {\n        return reject(new Error(error));\n      }\n\n      resolve(stdout.split('\\n').join(''));\n    });\n  });\n}\n\nfunction commit() {\n  return command('git rev-parse HEAD');\n}\n\nfunction branch() {\n  return command('git rev-parse --abbrev-ref HEAD');\n}\n\nfunction dirty() {\n  return command('expr $(git status --porcelain 2>/dev/null| ' + 'egrep \"^(M| M)\" | wc -l)');\n}","map":null,"metadata":{},"sourceType":"script"}