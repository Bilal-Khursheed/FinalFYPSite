{"ast":null,"code":"const spawn = require('child_process').spawn;\n\nmodule.exports = {\n  tree,\n  pidsForTree,\n  getStat\n};\n\nfunction getStat() {\n  return new Promise(resolve => {\n    const command = \"ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat\";\n    const child = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n    var res = '';\n    child.stdout.on('data', data => res += data);\n    child.on('close', () => resolve(res));\n  });\n}\n\nfunction template(s) {\n  var stat = null; // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n\n  s.replace(/(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g, (all, PID, COMMAND, STAT, PPID) => {\n    stat = {\n      PID,\n      COMMAND,\n      PPID,\n      STAT\n    };\n  });\n  return stat;\n}\n\nfunction tree(stats) {\n  const processes = stats.split('\\n').map(template).filter(Boolean);\n  return processes;\n}\n\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  const parents = [pid];\n  const children = [];\n  tree.forEach(proc => {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      children.push(proc);\n    }\n  });\n  return children;\n}","map":null,"metadata":{},"sourceType":"script"}