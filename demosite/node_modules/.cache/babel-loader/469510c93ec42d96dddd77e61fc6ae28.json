{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils'); // internal\n\n\nvar reEscComments = /\\\\#/g; // note that '^^' is used in place of escaped comments\n\nvar reUnescapeComments = /\\^\\^/g;\nvar reComments = /#.*$/;\nvar reEscapeChars = /[.|\\-[\\]()\\\\]/g;\nvar reAsterisk = /\\*/g;\nmodule.exports = add;\n/**\n * Converts file patterns or regular expressions to nodemon\n * compatible RegExp matching rules. Note: the `rules` argument\n * object is modified to include the new rule and new RegExp\n *\n * ### Example:\n *\n *     var rules = { watch: [], ignore: [] };\n *     add(rules, 'watch', '*.js');\n *     add(rules, 'ignore', '/public/');\n *     add(rules, 'watch', ':(\\d)*\\.js'); // note: string based regexp\n *     add(rules, 'watch', /\\d*\\.js/);\n *\n * @param {Object} rules containing `watch` and `ignore`. Also updated during\n *                       execution\n * @param {String} which must be either \"watch\" or \"ignore\"\n * @param {String|RegExp} the actual rule.\n */\n\nfunction add(rules, which, rule) {\n  if (!{\n    ignore: 1,\n    watch: 1\n  }[which]) {\n    throw new Error('rules/index.js#add requires \"ignore\" or \"watch\" as the ' + 'first argument');\n  }\n\n  if (Array.isArray(rule)) {\n    rule.forEach(function (rule) {\n      add(rules, which, rule);\n    });\n    return;\n  } // support the rule being a RegExp, but reformat it to\n  // the custom :<regexp> format that we're working with.\n\n\n  if (rule instanceof RegExp) {\n    // rule = ':' + rule.toString().replace(/^\\/(.*?)\\/$/g, '$1');\n    utils.log.error('RegExp format no longer supported, but globs are.');\n    return;\n  } // remove comments and trim lines\n  // this mess of replace methods is escaping \"\\#\" to allow for emacs temp files\n  // first up strip comments and remove blank head or tails\n\n\n  rule = (rule || '').replace(reEscComments, '^^').replace(reComments, '').replace(reUnescapeComments, '#').trim();\n  var regexp = false;\n\n  if (typeof rule === 'string' && rule.substring(0, 1) === ':') {\n    rule = rule.substring(1);\n    utils.log.error('RegExp no longer supported: ' + rule);\n    regexp = true;\n  } else if (rule.length === 0) {\n    // blank line (or it was a comment)\n    return;\n  }\n\n  if (regexp) {// rules[which].push(rule);\n  } else {\n    // rule = rule.replace(reEscapeChars, '\\\\$&')\n    // .replace(reAsterisk, '.*');\n    rules[which].push(rule); // compile a regexp of all the rules for this ignore or watch\n\n    var re = rules[which].map(function (rule) {\n      return rule.replace(reEscapeChars, '\\\\$&').replace(reAsterisk, '.*');\n    }).join('|'); // used for the directory matching\n\n    rules[which].re = new RegExp(re);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}