{"ast":null,"code":"var noop = function () {};\n\nvar path = require('path');\n\nconst semver = require('semver');\n\nvar version = process.versions.node.split('.') || [null, null, null];\nvar utils = module.exports = {\n  semver: semver,\n  satisfies: test => semver.satisfies(process.versions.node, test),\n  version: {\n    major: parseInt(version[0] || 0, 10),\n    minor: parseInt(version[1] || 0, 10),\n    patch: parseInt(version[2] || 0, 10)\n  },\n  clone: require('./clone'),\n  merge: require('./merge'),\n  bus: require('./bus'),\n  isWindows: process.platform === 'win32',\n  isMac: process.platform === 'darwin',\n  isLinux: process.platform === 'linux',\n  isRequired: function () {\n    var p = module.parent;\n\n    while (p) {\n      // in electron.js engine it happens\n      if (!p.filename) {\n        return true;\n      }\n\n      if (p.filename.indexOf('bin' + path.sep + 'nodemon.js') !== -1) {\n        return false;\n      }\n\n      p = p.parent;\n    }\n\n    return true;\n  }(),\n  home: process.env.HOME || process.env.HOMEPATH,\n  quiet: function () {\n    // nukes the logging\n    if (!this.debug) {\n      for (var method in utils.log) {\n        if (typeof utils.log[method] === 'function') {\n          utils.log[method] = noop;\n        }\n      }\n    }\n  },\n  reset: function () {\n    if (!this.debug) {\n      for (var method in utils.log) {\n        if (typeof utils.log[method] === 'function') {\n          delete utils.log[method];\n        }\n      }\n    }\n\n    this.debug = false;\n  },\n  regexpToText: function (t) {\n    return t.replace(/\\.\\*\\\\./g, '*.').replace(/\\\\{2}/g, '^^').replace(/\\\\/g, '').replace(/\\^\\^/g, '\\\\');\n  },\n  stringify: function (exec, args) {\n    // serializes an executable string and array of arguments into a string\n    args = args || [];\n    return [exec].concat(args.map(function (arg) {\n      // if an argument contains a space, we want to show it with quotes\n      // around it to indicate that it is a single argument\n      if (arg.length > 0 && arg.indexOf(' ') === -1) {\n        return arg;\n      } // this should correctly escape nested quotes\n\n\n      return JSON.stringify(arg);\n    })).join(' ').trim();\n  }\n};\nutils.log = require('./log')(utils.isRequired);\nObject.defineProperty(utils, 'debug', {\n  set: function (value) {\n    this.log.debug = value;\n  },\n  get: function () {\n    return this.log.debug;\n  }\n});\nObject.defineProperty(utils, 'colours', {\n  set: function (value) {\n    this.log.useColours = value;\n  },\n  get: function () {\n    return this.log.useColours;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}