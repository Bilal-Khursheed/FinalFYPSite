{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\React\\\\demoProject\\\\demosite\\\\src\\\\PDFworking\\\\Reportpdf.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Page, Text, View, Document, StyleSheet, PDFDownloadLink } from \"@react-pdf/renderer\";\nimport { PDFViewer } from \"@react-pdf/renderer\";\n\nclass Reportpdf extends Component {\n  constructor(...args) {\n    super(...args);\n    this.styles = StyleSheet.create({\n      page: {\n        backgroundColor: \"tomato\"\n      },\n      section: {\n        color: \"white\",\n        textAlign: \"center\",\n        margin: 30,\n        width: 200,\n        \"@media max-width: 400\": {\n          width: 300\n        },\n        \"@media orientation: landscape\": {\n          width: 400\n        }\n      }\n    });\n\n    this.Mydoc = () => React.createElement(Document, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Page, {\n      size: \"A4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Medical Imaging Diagonistic System Report\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"This is a sample report that is generated by MID\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"This will produce a PDF document with a single page. Inside, two different blocks, each of them rendering a different text. These are not the only valid primitives you can use. Please refer to the Components or Examples sections for more information.\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"This will produce a PDF document with a single page. Inside, two different blocks, each of them rendering a different text. These are not the only valid primitives you can use. Please refer to the Components or Examples sections for more information.\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"This will produce a PDF document with a single page. Inside, two different blocks, each of them rendering a different text. These are not the only valid primitives you can use. Please refer to the Components or Examples sections for more information.\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"This will produce a PDF document with a single page. Inside, two different blocks, each of them rendering a different text. These are not the only valid primitives you can use. Please refer to the Components or Examples sections for more information.\")), React.createElement(View, {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"This will produce a PDF document with a single page. Inside, two different blocks, each of them rendering a different text. These are not the only valid primitives you can use. Please refer to the Components or Examples sections for more information.\"))));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"hello there\"), React.createElement(PDFDownloadLink, {\n      document: this.Mydoc,\n      fileName: \"sample.pdf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, ({\n      bolb,\n      url,\n      loading,\n      error\n    }) => loading ? \"Loading Document....\" : \"Download Now!\")), React.createElement(PDFViewer, {\n      width: 900,\n      height: 900,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Reportpdf;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/React/demoProject/demosite/src/PDFworking/Reportpdf.js"],"names":["React","Component","Page","Text","View","Document","StyleSheet","PDFDownloadLink","PDFViewer","Reportpdf","styles","create","page","backgroundColor","section","color","textAlign","margin","width","Mydoc","render","bolb","url","loading","error"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Document,\r\n  StyleSheet,\r\n  PDFDownloadLink\r\n} from \"@react-pdf/renderer\";\r\nimport { PDFViewer } from \"@react-pdf/renderer\";\r\n\r\nclass Reportpdf extends Component  {\r\n\r\n    // Create styles\r\nstyles = StyleSheet.create({\r\n    page: { backgroundColor: \"tomato\" },\r\n  \r\n    section: {\r\n      color: \"white\",\r\n      textAlign: \"center\",\r\n      margin: 30,\r\n      width: 200,\r\n      \"@media max-width: 400\": {\r\n        width: 300\r\n      },\r\n      \"@media orientation: landscape\": {\r\n        width: 400\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Create Document Component\r\n   Mydoc = () => (\r\n    <Document>\r\n      <Page size=\"A4\">\r\n        <View className=\"section\">\r\n          <Text>Medical Imaging Diagonistic System Report</Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>This is a sample report that is generated by MID</Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>\r\n            This will produce a PDF document with a single page. Inside, two\r\n            different blocks, each of them rendering a different text. These are\r\n            not the only valid primitives you can use. Please refer to the\r\n            Components or Examples sections for more information.\r\n          </Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>\r\n            This will produce a PDF document with a single page. Inside, two\r\n            different blocks, each of them rendering a different text. These are\r\n            not the only valid primitives you can use. Please refer to the\r\n            Components or Examples sections for more information.\r\n          </Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>\r\n            This will produce a PDF document with a single page. Inside, two\r\n            different blocks, each of them rendering a different text. These are\r\n            not the only valid primitives you can use. Please refer to the\r\n            Components or Examples sections for more information.\r\n          </Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>\r\n            This will produce a PDF document with a single page. Inside, two\r\n            different blocks, each of them rendering a different text. These are\r\n            not the only valid primitives you can use. Please refer to the\r\n            Components or Examples sections for more information.\r\n          </Text>\r\n        </View>\r\n        <View className=\"section\">\r\n          <Text>\r\n            This will produce a PDF document with a single page. Inside, two\r\n            different blocks, each of them rendering a different text. These are\r\n            not the only valid primitives you can use. Please refer to the\r\n            Components or Examples sections for more information.\r\n          </Text>\r\n        </View>\r\n      </Page>\r\n    </Document>\r\n  );\r\n    render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h1>hello there</h1>\r\n        <PDFDownloadLink document={this.Mydoc} fileName=\"sample.pdf\">\r\n          {({ bolb, url, loading, error }) =>\r\n            loading ? \"Loading Document....\" : \"Download Now!\"\r\n          }\r\n        </PDFDownloadLink>\r\n      </div>\r\n      <PDFViewer width={900} height={900}>\r\n        {}\r\n      </PDFViewer>\r\n    </div>\r\n  );\r\n} \r\n}\r\nexport default Reportpdf;\r\n"]},"metadata":{},"sourceType":"module"}